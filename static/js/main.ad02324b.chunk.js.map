{"version":3,"sources":["Components/FormComponent.js","Components/WeatherComponent.js","Components/TitlesComponent.js","Components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["FormComp","onSubmit","this","props","getWeather","type","name","placeholder","Component","Weather","temperature","Math","floor","city","country","humidity","description","error","Titles","className","Main","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","undefined","main","setState","temp","sys","weather","msg","message","state","APP","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"qQACqBA,E,uKAEb,OACQ,0BAAMC,SAAUC,KAAKC,MAAMC,YAEnB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,WAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,cAC9C,4BAAQF,KAAK,UAAb,oB,GAPcG,aCCjBC,E,uKAGb,OACI,6BACKP,KAAKC,MAAMO,aAAe,2CAAiBC,KAAKC,MAAMV,KAAKC,MAAMO,YAAY,KAAnD,YAC1BR,KAAKC,MAAMU,MAAQX,KAAKC,MAAMW,SAAW,wCAAcZ,KAAKC,MAAMU,KAAzB,KAAiCX,KAAKC,MAAMW,SACrFZ,KAAKC,MAAMY,UAAY,wCAAcb,KAAKC,MAAMY,UAChDb,KAAKC,MAAMa,aAAe,2CAAiBd,KAAKC,MAAMa,aACtDd,KAAKC,MAAMc,OAAS,2BAAIf,KAAKC,MAAMc,Y,GATfT,aCAhBU,E,uKAEb,OACI,6BACG,wBAAIC,UAAU,0BAAd,kBACA,wBAAIA,UAAU,6BAAd,mD,GALqBX,aCIfY,E,kDACjB,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IAWVC,WAZmB,uCAYN,WAAOiB,GAAP,uBAAAC,EAAA,6DACTD,EAAEE,iBAIIV,EAAOQ,EAAEG,OAAOC,SAASZ,KAAKa,MAC9BZ,EAAUO,EAAEG,OAAOC,SAASX,QAAQY,MANjC,SAOcC,MAAM,qDAAD,OAAsDd,EAAtD,YAA8DC,EAA9D,kBAtBpB,qCAeC,cAOHc,EAPG,gBAQUA,EAASC,OARnB,OAQHC,EARG,OASTC,QAAQC,IAAIF,GAERjB,QAAsBoB,IAAdH,EAAKI,KACb,EAAKC,SAAS,CACVzB,YAAaoB,EAAKI,KAAKE,KACvBvB,KAAMiB,EAAKxB,KACXQ,QAASgB,EAAKO,IAAIvB,QAClBC,SAAUe,EAAKI,KAAKnB,SACpBC,YAAac,EAAKQ,QAAQ,GAAGtB,YAC7BC,WAAOgB,KAMPM,OADiBN,IAAjBH,EAAKU,QACCV,EAAKU,aAEGP,IAATpB,GAA+B,KAATA,EACrB,sBAGA,oBAEV,EAAKsB,SAAS,CACVzB,iBAAauB,EACbpB,UAAMoB,EACNnB,aAASmB,EACTlB,cAAUkB,EACVjB,iBAAaiB,EACbhB,MAAOsB,KAtCN,4CAZM,sDAEf,EAAKE,MAAQ,CACT/B,iBAAauB,EACbpB,UAAMoB,EACNnB,aAASmB,EACTlB,cAAUkB,EACVjB,iBAAaiB,EACbhB,WAAOgB,GARI,E,qDAyDf,OACI,6BACI,yBAAKd,UAAU,WACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,4BACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,2BACX,kBAAC,EAAD,CAAUf,WAAYF,KAAKE,aAC3B,kBAAC,EAAD,CACIM,YAAaR,KAAKuC,MAAM/B,YACxBG,KAAMX,KAAKuC,MAAM5B,KACjBC,QAASZ,KAAKuC,MAAM3B,QACpBC,SAAUb,KAAKuC,MAAM1B,SACrBC,YAAad,KAAKuC,MAAMzB,YACxBC,MAAOf,KAAKuC,MAAMxB,kB,GA3ExBT,aCJbkC,E,uKAEjB,OACE,6BACC,kBAAC,EAAD,W,GAJ0BlC,aCUbmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACLc,QAAQd,MAAMA,EAAMuB,a","file":"static/js/main.ad02324b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nexport default class FormComp extends Component{\r\n    render(){\r\n        return(\r\n                <form onSubmit={this.props.getWeather} >\r\n                    \r\n                        <input type='text' name='city' placeholder=\"..City\" />\r\n                        <input type='text' name='country' placeholder=\"..Country\" />\r\n                        <button type='submit'>Get Weather</button>\r\n                   \r\n                </form>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Weather extends Component{\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                {this.props.temperature && <p>Temperature :{Math.floor(this.props.temperature-273)} Celsius</p>}  \r\n                {this.props.city && this.props.country && <p>Location :{this.props.city}, {this.props.country}</p> }\r\n                {this.props.humidity && <p>Humidity: {this.props.humidity}</p>}\r\n                {this.props.description && <p>description :{this.props.description}</p>}\r\n                {this.props.error && <p>{this.props.error}</p>}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Titles extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n               <h1 className=\"title-container__title\">Weather Finder</h1>\r\n               <h3 className=\"title-container__subtitle\">Find out temperature , conditions and more</h3>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport FromComp from './FormComponent';\r\nimport Weather from './WeatherComponent';\r\nimport Titles from './TitlesComponent';\r\nconst API_KEY = 'b9c633e4e967c403065bfffb0126bdf0';\r\n\r\nexport default class Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            temperature: undefined,\r\n            city: undefined,\r\n            country: undefined,\r\n            humidity: undefined,\r\n            description: undefined,\r\n            error: undefined,\r\n        }\r\n    }\r\n\r\n    getWeather = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // console.log(e.target.elements);\r\n\r\n        const city = e.target.elements.city.value;\r\n        const country = e.target.elements.country.value;\r\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\r\n        const data = await api_call.json();\r\n        console.log(data);\r\n\r\n        if (city && data.main !== undefined) {\r\n            this.setState({\r\n                temperature: data.main.temp,\r\n                city: data.name,\r\n                country: data.sys.country,\r\n                humidity: data.main.humidity,\r\n                description: data.weather[0].description,\r\n                error: undefined,\r\n            });\r\n        }\r\n        else {\r\n            var msg;\r\n            if (data.message !== undefined) {\r\n                msg = data.message;\r\n            }\r\n            else if (city === undefined || city === \"\") {\r\n                msg = \"Enter the city name\";\r\n            }\r\n            else {\r\n                msg = \"Something's wrong\";\r\n            }\r\n            this.setState({\r\n                temperature: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                humidity: undefined,\r\n                description: undefined,\r\n                error: msg,\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"wrapper\">\r\n                    <div className=\"main\">\r\n                        <div className=\"container-fluid\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col xs-5 title-container\">\r\n                                    <Titles />\r\n                                </div>\r\n                                <div className=\"col xs-7 form-container\">\r\n                                    <FromComp getWeather={this.getWeather} />\r\n                                    <Weather\r\n                                        temperature={this.state.temperature}\r\n                                        city={this.state.city}\r\n                                        country={this.state.country}\r\n                                        humidity={this.state.humidity}\r\n                                        description={this.state.description}\r\n                                        error={this.state.error}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport Main from './Components/MainComponent';\nexport default class APP extends Component {\n  render(){\n    return(\n      <div>\n       <Main />\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}